<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>分享一首歌</title>
    <link href="/2022/01/06/%E5%88%86%E4%BA%AB%E4%B8%80%E9%A6%96%E6%AD%8C/"/>
    <url>/2022/01/06/%E5%88%86%E4%BA%AB%E4%B8%80%E9%A6%96%E6%AD%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="《定风波》"><a href="#《定风波》" class="headerlink" title="《定风波》"></a>《定风波》</h2><p>演唱：谭咏麟</p><p><a href="https://www.bilibili.com/video/BV1LB4y1w718?from=search&amp;seid=5536345585008521135&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1LB4y1w718?from=search&amp;seid=5536345585008521135&amp;spm_id_from=333.337.0.0</a></p><p>这首歌是央视《经典咏流传》截止目前所有歌曲中我最喜欢的一首歌，没有之一。苏轼的《定风波》本来抒发的就是一种面对人生得失，困阻时洒脱，旷达的情怀，校长绝对是华语歌坛殿堂级的人物，当年在如日中天的时候宣布不再接受任何颁给他的奖项。面对人生中的起起落落，校长的真情演唱也就真的是让人感受到那句“也无风雨也无晴”了。</p><p>放下千斤重<br>只剩无法承受之轻<br>得之我幸 纵有失去不怨命<br>酒先干为净 是非留给后人评<br>喧嚣过后 心中 风波为谁定<br>英雄皆寂寞<br>铮铮铁骨尚有柔情<br><strong>时光无心 留不住奔波的身影</strong><br><strong>愿不负曾经 半生爱恨岂无凭</strong><br>万籁俱寂 梦里 长歌还未静<br><strong>莫听穿林打叶声</strong><br><strong>何妨吟啸且徐行</strong><br><strong>竹杖芒鞋轻胜马 谁怕</strong><br><strong>一蓑烟雨任平生</strong><br><strong>料峭春风吹酒醒 微冷</strong><br><strong>山头斜照却相迎</strong><br><strong>回首向来萧瑟处 归去</strong><br><strong>也无风雨也无晴</strong></p><p>英雄皆寂寞<br>铮铮铁骨尚有柔情<br>时光无心 留不住奔波的身影<br>愿不负曾经 半生爱恨岂无凭<br>万籁俱寂 梦里 长歌还未静<br>莫听穿林打叶声<br>何妨吟啸且徐行<br>竹杖芒鞋轻胜马 谁怕<br>一蓑烟雨任平生<br>料峭春风吹酒醒 微冷<br>山头斜照却相迎<br>回首向来萧瑟处 归去<br>也无风雨也无晴</p><p>回首向来萧瑟处 归去<br>也无风雨也无晴</p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人与人相处，记住这三句话（《人民日报》夜读摘选）</title>
    <link href="/2022/01/06/%E5%A4%9C%E8%AF%BB%E6%91%98%E9%80%89/"/>
    <url>/2022/01/06/%E5%A4%9C%E8%AF%BB%E6%91%98%E9%80%89/</url>
    
    <content type="html"><![CDATA[<p><strong>尊重是标配</strong><br>不尊重别人的人，别人也不会尊重他。只有尊重别人的人，才能让人尊重。有人说过：“我尊敬任何一个独立的灵魂，虽然有些我并不认可，但我可以尽可能地去理解。”<br>这个世界上，每个人的经历都不一样。不必完全求同，但求相互尊重。与人交往，我们要做的第一件事就是给予对方足够的尊重。尊重别人的兴趣，尊重别人的三观，尊重彼此的差异。<br>只有你尊重别人，别人才会尊重你。平等对待，相互尊重，是人与人交往最基本的准则。<br><strong>靠谱是高配</strong><br>听过一句话：“真正交朋友要找靠谱的人。”什么叫靠谱？有人曾下过一个精辟的定义：<strong>处处有交代，件件有着落，事事有回音</strong>。<br>一个人值不值得交往，能不能相处长久，往往取决于他有多靠谱。靠谱，说起来简单，落下去复杂；听起来像感觉，做起来是原则。<br>真正靠谱的人，都拥有让人放心的能力。<strong>在这个世界上，从来不缺聪明的人，缺的是为人处世可靠踏实的人</strong>。余生，一定要和靠谱踏实的人同行，同时也要时刻提醒自我，要做一个有担当，办事牢靠的人。<br><strong>厚道是顶配</strong><br>俗语说得好：“计较不如坦诚，精明不如厚道。”一段情谊的维系，通常需要双方同等的付出，倘若出现偏颇，再好的情分也会变淡。<br>有人说：“欣赏一个人，始于颜值，敬于才华，合于性格，久于善良，终于人品。”漫漫人生路上，我们会遇到很多人，会与许多人相知相识。与人品好的人交往，感情才会随着时间的沉淀，变得更加深厚而稳固。<br>相处，靠缘分；深交，看人品。为人厚道，品行端正的人，最值得我们深交一辈子。<br>归根结底，人和人之间，能不能处得来，首先看的是彼此是否尊重；能不能深交，主要看是否靠谱；能不能走得太久，最终还得看人品如何。短期交往看脾性，一生交往看品行。<br>人生的路途漫长曲折，一定要与对的人并肩同行。<br><strong>小体会</strong><br>从小我们就从老师，从亲人那里听很多很多为人处世的道理，可长大后才慢慢发现，那些道理只有我们在平平常常的生活中的真切体验中才会记得如此深刻。对于自己身边的朋友，自己向来都是坦诚相待，但有时遇到一些与自己“道不同”的人，也不会总是那么热情以迎，但依旧给予尊重。对于自己真正在乎的人，靠谱，厚道，尊重永远是牢记于心的准则。世间朋友千千万，惟愿与共情之人同行！</p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文十问</title>
    <link href="/2022/01/03/%E8%AE%BA%E6%96%87%E5%8D%81%E9%97%AE/"/>
    <url>/2022/01/03/%E8%AE%BA%E6%96%87%E5%8D%81%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<p>选自之前在Bilibili上看到的一个在线论文阅读网站（<a href="https://readpaper.com/%EF%BC%89">https://readpaper.com/）</a><br>用了这个看了几篇文章，感觉还不错！但实话说我最多只能回答其中的5问。<br>下面的论文十问即摘自该网站，希望对你有所帮助！</p><p>1.论文试图解决什么问题？</p><p>2.这是否是一个新的问题？</p><p>3.这篇文章要验证一个什么假设？</p><p>4.有哪些相关研究？如何归类？谁是这一课题在领域内值得关注的研究员？</p><p>5.论文中提到的解决方案之关键是什么？</p><p>6.论文中的实验是如何设计的？</p><p>7.用于定量评估的数据集是什么？代码有没有开源？</p><p>8.论文中的实验及结果有没有很好的支持需要验证的科学假设？</p><p>9.这篇论文到底有什么贡献？</p><p>10.下一步呢？有什么工作可以继续深入？</p>]]></content>
    
    
    <categories>
      
      <category>知识分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022写给自己的贺词</title>
    <link href="/2022/01/01/20%E6%96%B0%E5%B9%B4%E8%B4%BA%E8%AF%8D/"/>
    <url>/2022/01/01/20%E6%96%B0%E5%B9%B4%E8%B4%BA%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>风景番</title>
    <link href="/2021/12/29/%E9%A3%8E%E6%99%AF%E7%95%AA/"/>
    <url>/2021/12/29/%E9%A3%8E%E6%99%AF%E7%95%AA/</url>
    
    <content type="html"><![CDATA[<h2 id="印象工大"><a href="#印象工大" class="headerlink" title="印象工大"></a>印象工大</h2><p><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-12-29.jpg" alt="子良楼（朝晖）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-12-49-44.jpg" alt="屏峰图书馆（拍摄于2018/9/25）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-12-51-48.jpg" alt="雕像（拍摄于2018/9/25）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-12-52-52.jpg" alt="和山大观（屏峰）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-12-53-32.jpg" alt="王者峡谷（屏峰）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-00-34.jpg" alt="格桑花海（屏峰）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-01-33.jpg" alt="油菜花开（屏峰）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-08-25.jpg" alt="向日葵地（屏峰）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-09-22.jpg" alt="古运河畔（朝晖）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-10-17.jpg" alt="古桥之下（朝晖）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-13-27.jpg" alt="蓝桥（朝晖）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-13-57.jpg" alt="林荫道（朝晖）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-11-02.jpg" alt="体育大馆（屏峰）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-11-55.jpg" alt="图书馆（朝晖）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-12-56.jpg" alt="博易楼（屏峰）"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-14-37.jpg" alt="闲亭（屏峰）"></p><h2 id="登宝石山（2021-7-19）"><a href="#登宝石山（2021-7-19）" class="headerlink" title="登宝石山（2021/7/19）"></a>登宝石山（2021/7/19）</h2><p>宝石山位于杭州西子湖畔，坐落于山上的保俶塔为五代十国时期的传统古建筑，与断桥遥相呼应，是为西湖美景中最具代表性的景点之一。同好友于清晨共登宝石山观日出美景，得以记录如下：<br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-35-31.jpg" alt="朝霞"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-36-01.jpg" alt="晨岚"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-36-51.jpg" alt="好友"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-37-47.jpg" alt="天宇开阔"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-45-48.png" alt="刻字石"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-46-17.png" alt="刻字石"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-44-47.png" alt="保俶塔"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-39-43.jpg" alt="西湖远眺"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-40-05.jpg" alt="西湖远眺"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-40-25.jpg" alt="西湖远眺"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-47-26.png" alt="一跃千里"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-41-21.jpg" alt="断桥荷花"><br><img src="https://image.wxydejoy.top/kk/%E9%A3%8E%E6%99%AF%E7%95%AA/2022-01-01-13-41-49.jpg" alt="心云之下"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>毕业设计记录</title>
    <link href="/2021/12/29/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/12/29/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>知识分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>美食番</title>
    <link href="/2021/12/29/%E7%BE%8E%E9%A3%9F%E7%95%AA/"/>
    <url>/2021/12/29/%E7%BE%8E%E9%A3%9F%E7%95%AA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式复习番外-再看C与C++</title>
    <link href="/2021/12/28/%E7%95%AA%E5%A4%96/"/>
    <url>/2021/12/28/%E7%95%AA%E5%A4%96/</url>
    
    <content type="html"><![CDATA[<p>前言：</p><p>通过此前一篇对于嵌入式系统相关内容的复习总结，尤其是对C/C++一些相关知识的回顾，对于C/C++又有了一些新的认识，此篇作为自己对于案头摆放很久了的一本国外C/C++参考书《标准C语言基础教程》中一些重要概念的再探总结。</p><p><img src="https://image.wxydejoy.top/kk/%E5%88%9D%E5%A7%8B%E5%8C%96/2021-12-28-18-29-04.jpg" alt="选自JZY朋友圈"></p><h2 id="【C与C-本质区别】"><a href="#【C与C-本质区别】" class="headerlink" title="【C与C++本质区别】"></a>【<strong>C与C++本质区别</strong>】</h2><p>首先我们得明白不管是C还是C++，其中定义的数据都必须要提供其类型的。如C中的int，double，char等。在C语言中这些数据类型被称为<strong>内置数据类型</strong>（基本数据类型）。但在其他一些编程语言中，允许程序员（不是我）自己创建数据类型（一个具有相关的值范围和能够在可接受的值上执行操作的值类型），被成为<strong>抽象数据类型</strong>。C语言不行，但C++具备这种能力。于是，C++中这种被程序员（不是我）创建出来的抽象数据类型又被称为类（class）。科普：C++的原名又叫“C with Classes”。</p><h2 id="【过程抽象】"><a href="#【过程抽象】" class="headerlink" title="【过程抽象】"></a>【<strong>过程抽象</strong>】</h2><p>函数的来源：所有的编程语言都允许对自包含的指令集赋予一个名称，C语言中称为函数。</p><p>以上面这样的方式给函数赐名，就可以简单的用带有实参的名称调用这个函数，即为过程抽象。</p><p>note:以抽象思维来思考一些问题时能够让程序员（不是我）站在更高的层次解决问题，而不必在意细节。像通过海伦公式计算任意一个三角形的面积，可以不必立即去想如何得到这个面积，而是将它设计为一个可以调用的函数。这样就可以有更多的精力来从更高的角度关注程序的其他方面。至于函数设计可以找力工做或留到最后。</p><h2 id="【小体会】"><a href="#【小体会】" class="headerlink" title="【小体会】"></a>【<strong>小体会</strong>】</h2><p>对于C语言中最关键的函数有这样的理解以及了解其与C++的关系与区别之后，我将首先展开对于自己前些天读过的书中的一些关键点的分享，如函数模块性中的对于变量的深层次介绍，对于数组，地址，指针三大主题的深入理解等，最后将简单的介绍一些C++的知识，那些基础的知识如选择，循环，数据类型等就不再写了（这个写完可能会做另做一篇总结）。当然，深知自己通过书本中的这些介绍与自己的一些思考只是触碰其皮毛而已，“绝知此事要躬行”。参考书中也有大量的实例与练习题，我将尽力把看过的基础知识与实例结合来理解然后进行总结并形象地呈现在您的眼前，对于刚开始通过blog创作知识分享的自己来说显然是个挑战，也需要自己能够做一些实际的练习，但既然已经开始，便要好好做下去！</p><h2 id="【一-再探变量】"><a href="#【一-再探变量】" class="headerlink" title="【一.再探变量】"></a>【一.再探变量】</h2><p>之前在嵌入式那篇中，被动态变量，静态变量，全局变量，局部变量，局部动态变量，局部静态变量等搞得脑袋晕晕乎乎，所以这次想来跳出一次理论知识的旋涡，先通过一个简单实例初步建立印象：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">int</span> firstnum;<span class="hljs-comment">//建立一个名称为firstnum的全局变量</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//函数原型</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> secnum;<span class="hljs-comment">//建立一个名称为secnum的局部变量</span><br>    firstnum = <span class="hljs-number">10</span>;<span class="hljs-comment">//10存入全局变量secnum中</span><br>    secnum = <span class="hljs-number">20</span>;<span class="hljs-comment">//20存入第一个局部变量secnum中</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;firstnum = %d&quot;</span>,firstnum);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;secnum = %d&quot;</span>,secnum);<br>    <br>    fun();<span class="hljs-comment">//调用fun函数</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;firstnum = %d&quot;</span>,firstnum);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;secnum = %d&quot;</span>,secnum);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> secnum;<span class="hljs-comment">//建立第二个名称为secnum的局部变量</span><br>    secnum = <span class="hljs-number">30</span>;<span class="hljs-comment">//30存入第二个局部变量secnum中</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;firstnum = %d&quot;</span>,firstnum);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;secnum = %d&quot;</span>,secnum);<br>    <br>    firstnum = <span class="hljs-number">50</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">firstnum = <span class="hljs-number">10</span><br>secnum =<span class="hljs-number">20</span><br>    <br>firstnum = <span class="hljs-number">10</span><br>secnum = <span class="hljs-number">30</span><br>    <br>fristnum = <span class="hljs-number">50</span><br>secnum = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>在这个程序中，全局变量firstnum的存储区被位于函数外面的声明语句创建。main()函数与fun()函数都在此声明语句的后面，故两个函数都可以使用firstnum这个全局变量。所以我们看到当fun()函数可以将firstnum的值改变为50。</p><p>main()函数与fun()函数中的两个名称相同的变量secnum为局部变量，它们的存储区分别被两个函数中的声明语句所创建。这两个变量虽然名称相同（故意而为之），但每一个变量都对它们的存储区所创建的函数是局部的（简单的说就是每一个变量都只能够在适当的函数内使用，当它在哪个函数中被使用时，对应函数为它保留的存储区就会被访问）。</p><p>为什么C语言不会混淆这两个名称相同的变量？</p><p>因为在给定的时刻只有一个函数能够执行，而当这个函数在执行的时候，只有这个变量的存储区和由这个函数创建的参数被自动的访问。此外，如果这个函数使用一个全局变量，程序将为正确的名称搜索全局存储区。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>通过上面这个简单的程序可以感受到变量在C语言中有自己特定的作用范围（全局或局部），即作用域。这一点有点像以前学数学中的函数时定义域的意味儿。在参考书中作者将函数比喻成一个封闭的盒子，顶上有孔用来接收值，底部有孔用来输出值。封闭可以看做在函数内部进行的事情是隐藏的。</p><p>总而言之一句话：有局部作用域的变量，是已经被函数体内安排的变量语句为它保留的存储区位置的变量；有全局作用域的变量，它是存储区已经被一个位于任何函数之外的声明语句创建的变量。</p>]]></content>
    
    
    <categories>
      
      <category>知识分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式系统学习小结</title>
    <link href="/2021/12/26/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    <url>/2021/12/26/%E5%B5%8C%E5%85%A5%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-31-08-11-08.png" alt="嵌入式系统学习框架"></p><h2 id="【1】嵌入式系统与通用计算机的区别。"><a href="#【1】嵌入式系统与通用计算机的区别。" class="headerlink" title="【1】嵌入式系统与通用计算机的区别。"></a>【1】嵌入式系统与通用计算机的区别。</h2><p>嵌入式系统可以看做将通用计算机所具备的CPU,存储器，输入/输出功能单元及其外设接口集成在一起，其内部的微控制器是一颗集成电路，拥有很多可编程IO引脚与外设连接，而通用计算机主板是一块印刷电路板，板边缘有外设接口用于连接外设。</p><p>嵌入式系统的CPU相较于通用计算机占用空间更小，功耗更低，同时时钟速度更低。</p><h2 id="【2】哈佛结构与冯诺依曼结构之区别"><a href="#【2】哈佛结构与冯诺依曼结构之区别" class="headerlink" title="【2】哈佛结构与冯诺依曼结构之区别"></a>【2】哈佛结构与冯诺依曼结构之区别</h2><p>冯诺依曼架构</p><p><img src="https://image.wxydejoy.top/kk/image002.gif" alt="冯诺依曼架构示意图"></p><p>哈佛架构</p><p>哈佛结构将程序存储器独立出来，程序存储器拥有独立的地址总线和数据总线。</p><p><img src="https://image.wxydejoy.top/kk/image003.png" alt="哈佛架构示意图"></p><h2 id="【3】ARM体系架构的流水线工作方式"><a href="#【3】ARM体系架构的流水线工作方式" class="headerlink" title="【3】ARM体系架构的流水线工作方式"></a>【3】ARM体系架构的流水线工作方式</h2><p>CPU的流水线技术是一种加速程序运行的技术。将一条指令分解为多步，让连续多条指令的各步操作重叠，实现几条指令并行处理。</p><p>2级流水线：取指令，预译码，主译码，执行指令。<br><img src="https://image.wxydejoy.top/kk/%E5%88%9D%E5%A7%8B%E5%8C%96/2021-12-27-18-58-15.png" alt="2级流水线示意图"></p><p>3级流水线：取指令，译码，执行指令三步。第n条指令执行时，第n+1条指令译码，同时第n+2条指令取指，往下进行。</p><p>（note:ARM Cortex-M0/M3的CPU内核都采用3级流水线，ARM Cortex-M0+的CPU内核则采用2级流水线，其动态功耗明显低于M0与M3。）</p><h2 id="【4】相关名词"><a href="#【4】相关名词" class="headerlink" title="【4】相关名词"></a>【4】相关名词</h2><p>寻址能力：取决于处理器的地址线数目</p><p>IO接口三态：高电平，低电平，悬空</p><p>TTL：晶体管-晶体管逻辑电平。+5v=”1”，0v=”0”。开关速度快，功耗较大。</p><p>CMOS：基于NMOS，PMOS两者互补的MOSFET工艺，把N沟的MOSFET与P沟的MOSFET做在一个芯片上。功耗显著低于双极性与NMOS电路，速度比较低。</p><p>（Note:<a href="https://baike.baidu.com/item/MOSFET/9205693?fr=aladdin"><span class="underline">MOSFET_百度百科 (baidu.com)</span></a>）</p><p>驱动能力：输出电流之能力，</p><h2 id="【5】ARM的几种工作模式"><a href="#【5】ARM的几种工作模式" class="headerlink" title="【5】ARM的几种工作模式"></a>【5】ARM的几种工作模式</h2><p>用户模式；系统模式；快中断模式；中断模式；管理模式；中止模式；未定义模式。</p><p>（Note:<a href="https://www.cnblogs.com/zjy0806/p/11956953.html"><span class="underline">ARM的七种工作模式 - 张晋毅 - 博客园 (cnblogs.com)</span></a>）</p><h2 id="【6】堆与栈"><a href="#【6】堆与栈" class="headerlink" title="【6】堆与栈"></a>【6】堆与栈</h2><p><strong>栈区</strong>：编译器自动分配释放内存，存放函数的参数值，局部变量的值等。（数据必须有一个已知的固定的大小。速度较快，但无法控制。）</p><p>Note:</p><p>函数调用时，第一个进栈的是主函数后的下一条指令的地址，然后是函数的各个参数，然后是函数中的局部变量，（静态变量不入栈）。函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，即主函数的下一条指令。</p><p><strong>堆区</strong>：一由程序员分配释放内存（先请求一定大小的空间，OS在堆某处找到一个空位，并标记为已使用，返回一个其位置的指针。速度较慢，但用起来方便。）</p><p>Note:</p><p>C中的malloc函数使用heap:</p><p>p1 = (char*)malloc(10)</p><p>C++中的new运算符：</p><p>p2 = new char[10]</p><p>p1 p2本身是在栈中的。</p><h2 id="【7】静态变量"><a href="#【7】静态变量" class="headerlink" title="【7】静态变量"></a>【7】静态变量</h2><p>存放在全局数据区（静态数据区）；程序结束时候才被释放（生命周期）。</p><p><strong>局部静态变量特点</strong>：</p><p>不会随着函数的调用和退出而发生变化。尽管变量继续存在，但不能使用它。若再次调用定义它的函数，又可继续使用，且保存了前次被调用的值。</p><p>只会初始化一次。</p><p>只能被初始化为一个字符值或一个常量，不能使用表达式。若为初始化，系统赋值为0</p><p>适用于当多次调用一个函数且要求在调用之间保留某些变量的值时，可考虑采用静态局部变量。</p><p>所有全局变量都是静态存储方式。</p><h2 id="【8】中断"><a href="#【8】中断" class="headerlink" title="【8】中断"></a>【8】中断</h2><p>由于意外事件的打断，CPU暂时中止当前程序，转去处理事件，处理完后，返回原程序的过程。</p><p>内（软）中断：定时中断</p><p>外（硬）中断：外部事件</p><p>提高CPU工作效率。</p><p>由中断服务程序执行。</p><h2 id="【9】总线性能参数？如何避免冲突？"><a href="#【9】总线性能参数？如何避免冲突？" class="headerlink" title="【9】总线性能参数？如何避免冲突？"></a>【9】总线性能参数？如何避免冲突？</h2><p>性能参数：总线带宽；总线位宽；总线工作时钟频率。</p><p>总线带宽=总线位宽*总线工作时钟频率。</p><p>（<a href="http://blog.sina.com.cn/s/blog_a37c02dc01017xfi.html"><span class="underline">总线篇：性能参数详解_科迪亚_新浪博客 (sina.com.cn)</span></a>）</p><h2 id="【10】地址对齐（内存地址对齐-mhq-martin-博客园-cnblogs-com-）"><a href="#【10】地址对齐（内存地址对齐-mhq-martin-博客园-cnblogs-com-）" class="headerlink" title="【10】地址对齐（内存地址对齐 - mhq_martin - 博客园 (cnblogs.com)）"></a>【10】地址对齐（<a href="https://www.cnblogs.com/mhq-martin/p/11537873.html"><span class="underline">内存地址对齐 - mhq_martin - 博客园 (cnblogs.com)</span></a>）</h2><p>包括基本数据对齐与结构体数据对齐。</p><p>基本数据对齐：数据在内存中的偏移地址必须等于一个字的倍数。</p><p>结构体数据对齐：为了对齐数据，可能必须在上一个数据结束和下一个数据开始的地方插入一些没有用处的字节。</p><p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-03-21.png" alt="32位CPU与内存模型"></p><p>问题：既然32位CPU以双字进行数据传输，那么当数据只有8位或16位时候，CPU是否是按照数据的位数来进行数据传输？</p><p>假设一个int类型数据首地址为1。一部分会存在地址0-3中，另一部分会在4-7中，CPU会分两次取数据并通过最后的组合舍弃操作得到此int类型数据。但如果int类型数据首地址为0，就大大方便很多。</p><p>内存对齐的原则：</p><p>1.第一个成员的首地址为0；</p><p>2.每个成员的首地址是自身大小的整数倍；</p><p>（以4字节对齐为例，如果自身大小大于4字节，都以4字节整数倍为基准对齐）：</p><p>3.最后以结构总体对齐；</p><p>（以4字节对齐为例，取结构体中最大成员类型倍数，如果超过4字节，都以4字节整数倍为基准对齐。还有补齐）</p><p><strong>实例</strong>：</p><p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-04-59.png"><br><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-05-27.png"><br><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-05-55.png"></p><h2 id="【11】位运算（位运算（-amp-、-、-、-、-gt-gt-、-菜鸟教程-runoob-com-；-【算法技巧】通过位运算来带你装逼-知乎-zhihu-com-；位运算有什么奇技淫巧？-知乎-zhihu-com-）"><a href="#【11】位运算（位运算（-amp-、-、-、-、-gt-gt-、-菜鸟教程-runoob-com-；-【算法技巧】通过位运算来带你装逼-知乎-zhihu-com-；位运算有什么奇技淫巧？-知乎-zhihu-com-）" class="headerlink" title="【11】位运算（位运算（&amp;、|、^、~、&gt;&gt;、 | 菜鸟教程 (runoob.com)；## 【算法技巧】通过位运算来带你装逼 - 知乎 (zhihu.com)；位运算有什么奇技淫巧？ - 知乎 (zhihu.com)）"></a>【11】位运算（<a href="https://www.runoob.com/w3cnote/bit-operation.html"><span class="underline">位运算（&amp;、|、^、~、&gt;&gt;、 | 菜鸟教程 (runoob.com)</span></a>；<a href="https://zhuanlan.zhihu.com/p/65968533"><span class="underline">## 【算法技巧】通过位运算来带你装逼 - 知乎 (zhihu.com)</span></a>；<a href="https://www.zhihu.com/question/38206659"><span class="underline">位运算有什么奇技淫巧？ - 知乎 (zhihu.com)</span></a>）</h2><p>&amp;（与）：两位都为1，结果为1。</p><p>|（或）：两位都为0，结果为0。</p><p>^（异或）：两位相同为0，相异为1。</p><p>&lt;&lt;（左移），&gt;&gt;（右移）</p><p>用途：</p><p>置0:</p><p>1100 0011 &amp; 0000 0000 = 0000 0000</p><p>取指定位：</p><p>1100 0011 &amp; 0000 1111 = 0000 0011</p><p>判断奇偶：</p><p>1100 0011 &amp; 0000 0001 = 0000 0001</p><p>置1:</p><p>1100 0011 | 0000 1111 = 1100 1111</p><p>翻转指定位：</p><p>1100 0011 ^ 0000 1111 = 1100 1100</p><p>取自身值：</p><p>1100 0011 ^ 0000 0000 = 1100 0011</p><p><strong>交换两个数</strong>：</p><p>0000 0101（x） 同 0000 1100（y） 互相交换值</p><p>x = x ^ y</p><p>y = x ^ y</p><p>x = x ^ y</p><p>^的交换律与结合律：</p><p>y = x ^ y = (x ^ y) ^ y = x ^ (y ^ y) = x ^ 0 = x</p><p>x = x ^ y = x ^ (x ^ y) = (x ^ x) ^ y = 0 ^ y = y</p><h2 id="【12】SHL-SHR-SAR-SAL相关（汇编语言SAL（算术左移）和SAR（算术右移）指令：将操作数左-右移一位-biancheng-net-）"><a href="#【12】SHL-SHR-SAR-SAL相关（汇编语言SAL（算术左移）和SAR（算术右移）指令：将操作数左-右移一位-biancheng-net-）" class="headerlink" title="【12】SHL SHR SAR SAL相关（汇编语言SAL（算术左移）和SAR（算术右移）指令：将操作数左/右移一位 (biancheng.net)）"></a>【12】SHL SHR SAR SAL相关（<a href="http://c.biancheng.net/view/3592.html"><span class="underline">汇编语言SAL（算术左移）和SAR（算术右移）指令：将操作数左/右移一位 (biancheng.net)</span></a>）</h2><p><strong>SHL</strong>:使目的操作数逻辑左移一位，最低位用0填充。最高位进入进位标志位（cf），cf中原来的数值被丢弃。</p><p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-07-47.png" alt="SHL示意图"></p><p>function:位元乘法</p><p>任何操作数左移n位，等于将该数乘以2^n。</p><p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-09-06.png"></p><p><strong>SHR</strong>:使目的操作数逻辑右移一位，最高位用0填充。最低位进入进位标志位（cf）,cf中原来的数值被丢弃。</p><p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-09-31.png" alt="SHR示意图"></p><p>function:位元除法</p><p>将一个无符号数右移n位，等于将该数除以2^n。</p><p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-09-57.png"></p><p><strong>SAL与SAR</strong>:两个指令的操作数类型与SHL,SAR完全相同，差别在于<strong>移位后空出来的位用原数据的符号位填充</strong>。</p><p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-10-28.png" alt="SAL与SAR示意图"></p><p>function:有符号数除法</p><p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-11-04.png"></p><h2 id="【13】形参和实参的传递（c语言的形参和实参传递的区别详解-C-语言-脚本之家-jb51-net-；形参与实参之间的值传递-844604778-CSDN博客；函数实参与形参之间的传递-du111-的博客-CSDN博客-实参与形参的传递方式）"><a href="#【13】形参和实参的传递（c语言的形参和实参传递的区别详解-C-语言-脚本之家-jb51-net-；形参与实参之间的值传递-844604778-CSDN博客；函数实参与形参之间的传递-du111-的博客-CSDN博客-实参与形参的传递方式）" class="headerlink" title="【13】形参和实参的传递（c语言的形参和实参传递的区别详解_C 语言_脚本之家 (jb51.net)；形参与实参之间的值传递_844604778-CSDN博客；函数实参与形参之间的传递_du111_的博客-CSDN博客_实参与形参的传递方式）"></a>【13】形参和实参的传递（<a href="https://www.jb51.net/article/180116.htm"><span class="underline">c语言的形参和实参传递的区别详解_C 语言_脚本之家 (jb51.net)</span></a>；<a href="https://blog.csdn.net/iteye_1485/article/details/82543055"><span class="underline">形参与实参之间的值传递_844604778-CSDN博客</span></a>；<a href="https://blog.csdn.net/du111_/article/details/79929578"><span class="underline">函数实参与形参之间的传递_du111_的博客-CSDN博客_实参与形参的传递方式</span></a>）</h2><p>传递的本质：</p><p><strong>1.值传递</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">int</span> j = i;<br><br>    j = <span class="hljs-number">20</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d,j = %d\n&quot;</span>,i,j);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：i =10,j = 20</p><p>在 int j = i 时，开辟了一个新内存，然后将i中的值复制到j中的过程。</p><p><strong>2.地址传递</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">int</span> *j = &amp;i;<br><br>    *j = <span class="hljs-number">20</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d,j = %d\n&quot;</span>,i,j);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：i =20,j=20</p><p>在 int *j = &amp;i时，开辟了一个新内存，然后将i的地址的值复制到j的过程。</p><p><strong>3.引用传递</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">int</span> &amp;j = i;<br><br>    j = <span class="hljs-number">20</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d,j = %d\n&quot;</span>,i,j);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：i = 20，j = 20</p><p>在 int &amp;j = i时，是将i重命名为j。</p><p><strong>交换两个数的值：</strong></p><p><strong>值传递：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>,b = <span class="hljs-number">3</span>;<br><br>    swap(a,b);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d\n&quot;</span>,a,b);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">int</span> tmp;<br><br>tmp = x;<br><br>x = y;<br><br>y = tmp;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d,y=%d\n&quot;</span>,x,y);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出：a=2,b=3 x=3,y=2</p><p><strong>地址传递：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">( <span class="hljs-keyword">int</span> *x, <span class="hljs-keyword">int</span> *y)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>,b = <span class="hljs-number">3</span>;<br><br>    swap(&amp;a,&amp;b);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d\n&quot;</span>,a,b);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *x,<span class="hljs-keyword">int</span> *y)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">int</span> tmp;<br><br>tmp = *x;<br><br>*x = *y;<br><br>*y = tmp;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d,y=%d\n&quot;</span>,x,y);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：a=3,b=2 x=3,y=2</p><p>不能直接修改指针，但可以修改指针指向的值。</p><h2 id="【14】变量与指针"><a href="#【14】变量与指针" class="headerlink" title="【14】变量与指针"></a>【14】变量与指针</h2><p>Note:</p><p>变量：在高级语言（如C语言），用符号名称来替换实际的内存地址（避免麻烦），这些符号的名称被称为变量（只是程序员为计算机内存单元赋予的名称，如在旅馆房间的门上挂了一个房间名，通过名称来寻找，而不是房间号）。</p><p>指针：实际上就是指地址。一切皆地址。指针变量用来存放指针（地址）</p><p>变量在内存中所占的存储单元的地址即为指针。（首地址）</p><p>指针变量也是一种变量，和其他变量一样要占据一定的储存空间。不同之处在于指针的存储空间存放的不是不同的数据，而是一个地址。</p><p>case:</p><p>假设i是一个占两个字节的整型变量，p是一个指向变量的指针。</p><p><img src="https://image.wxydejoy.top/kk/%E5%B5%8C%E5%85%A5%E5%BC%8F/2021-12-27-19-11-56.png"></p><p>变量i的地址范围为 2000H-2001H。i的数值为 10100100 01001011（高地址为高八位，低地址为低八位）。指针变量p也占两个内存单元 2100H-2101H。数值为 00100000 00000000。</p><p>指针变量p有自己的内存地址，同时其值为00100000 00000000（转换为16进制为2000H，为变量i的首地址）。通过这样将指针变量p与变量i连接起来（首先获得i的地址，通过i的地址来访问i的值）。</p><p>通常只关注指针变量指向的是谁，而不关注其本身的地址。若有一个指针变量p的地址存放在另一个指针变量q中，那么指针变量q就指向了指针变量p，</p><p>note:</p><p><a href="https://www.cnblogs.com/maxin/p/5544223.html"><span class="underline">指针与指针变量 - 新生代黑马 - 博客园 (cnblogs.com)</span></a></p><p><a href="https://blog.csdn.net/Zhang_Yixuan_ss/article/details/78801410"><span class="underline">c语言与指针——（一）指针与变量_张毅轩的博客-CSDN博客_c语言与指针</span></a></p><p><a href="https://blog.csdn.net/qq_45832958/article/details/104779537?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_paycolumn&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_paycolumn"><span class="underline">指针变量（C语言）_111辄的博客-CSDN博客_char指针变量</span></a></p><h2 id="【15】int-float-bool变量（存储机制）与0比较"><a href="#【15】int-float-bool变量（存储机制）与0比较" class="headerlink" title="【15】int float bool变量（存储机制）与0比较"></a>【15】int float bool变量（存储机制）与0比较</h2><p><strong>int类型变量i与0值比较：</strong></p><p>if(n == 0)</p><p>if(n != 0)</p><p><strong>float类型变量n与0值比较：</strong></p><p>const float EPSINON = 0.00001</p><p>if((x &gt;= -EPSINON) &amp;&amp; (x &lt;= EPSINON))</p><p>note:float类型与double类型的变量都有精度限制，不可用”==””！=”与任何数比较。浮点数在内存中的存储机制与整型数据不同，有舍入误差，即用近似数表示某个实数（一个实数由一个整数乘以某个基数（通常为2）的整数次幂得到）。所以浮点数不能判断相等，一般用范围来确定。</p><p><strong>BOOL类型变量flag与0值比较：</strong></p><p>if(flag)</p><p>if(! flag)</p><p>bool规定为TRUE和FALSE,但TURE值的定义在不同的环境和系统可能不同。</p><p><strong>指针变量p与0值的比较：</strong></p><p>if(p == NULL)</p><p>if(p != NULL)</p><p>16.全局变量，局部变量，静态变量，动态变量，常量</p><p><strong>全局变量</strong>：在所有函数体外部定义，程序的所有部分都可以使用，不受作用域影响。生命周期一直到程序的结束，为<strong>静态存储</strong>方式。</p><p><strong>局部变量</strong>：出现在一个作用域内，局限在一个函数内。又称自动变量（在进入作用域时，自动生成，离开作用域时，自动消失）。</p><p>note:通常函数里定义的变量，函数的参数都是局部变量。一般需要在某个函数里返回数组的地址或指针之类，此时必须定义为static，函数结束返回时才不会释放掉那块内存空间。</p><p><strong>静态存储变量（static）：</strong>在变量定义时就分定存储单元并一直不变，直至程序结束。（静态变量，全局动态变量）。只会初始化一次</p><p><strong>动态存储变量：</strong>程序执行时，使用时才分配存储单元，使用完立即释放。</p><p><strong>动态变量：</strong></p><p><strong>全局：</strong>所有函数外部定义，所有函数都可使用；作用域为整个项目（编译可执行文件的所有文件均可使用，外部文件通过extern关键字声明）；生命周期贯穿整个运行时间；默认初始化为0。</p><p><strong>局部：</strong>函数内部定义，其他函数和外部文件不能访问；作用域为当前函数；生命周期为函数调用到退出；</p><p><strong>静态变量：</strong></p><p><strong>全局：</strong>作用域为当前文件（与动态全局变量不同之处）；生命周期贯穿整个运行时间；</p><p><strong>局部：</strong>作用域为当前函数；生命周期为程序的运行到退出（和动态局部变量不同之处）。当再次调用函数时，静态局部变量不会被再次初始化，而是沿用上次函数退出时候的值。</p><p><strong>全局变量，静态全局变量，静态局部变量都在静态存储区分配空间。局部变量是在栈上分配空间。常量存储在常量区。</strong></p><p><a href="https://blog.csdn.net/qq_33757398/article/details/81365475"><span class="underline">静态变量与动态变量_renwu-CSDN博客_动态变量</span></a></p><p><a href="https://blog.csdn.net/zcyzsy/article/details/52207085"><span class="underline">C和C++中全局变量，局部变量，静态变量和常量_ZMyths的博客-CSDN博客_c++ 静态常量</span></a></p><p><a href="https://blog.csdn.net/weixin_42923076/article/details/111598681?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.essearch_pc_relevant&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.essearch_pc_relevant"><span class="underline">C++学习笔记——静态与常量（一）_zkccpro的博客-CSDN博客</span></a></p>]]></content>
    
    
    <categories>
      
      <category>知识分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《拆掉思维里的墙》阅读心得(持续更新)</title>
    <link href="/2021/12/22/%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97/"/>
    <url>/2021/12/22/%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<p>前言：本书是知名生涯规划师，畅销书作家古典老师的力作。此前在喜马拉雅晓书童频道听过好几期对这本书的解读，深有感触，遂购回一本闲来无事翻阅吸收。</p><p>以此篇作为对书中一些观点的记录以及自身之体会。</p><p><img src="https://image.wxydejoy.top/kk/%E5%88%9D%E5%A7%8B%E5%8C%96/2021-12-27-16-13-05.png" alt="封面.png"></p><p>​书背面有俞敏洪，张德芬，樊登等的推荐语，个人最喜欢樊登老师所说：“生活中很多人问我什么是成长，我非常喜欢古典老师的在书中写的一句话：‘成长是你内心的一个尺度。’，人与人，人与社会的差距，本质是由不同的心智模式造成的，当你拆掉思维里的墙，你的前路才会无限宽敞，才会无限明亮”。</p><p>​这里面我突然发现了“心智模式”这个有些新鲜的词，百度百科如此解释：“深植我们心中关于我们自己，别人，组织，及周围世界每个层面的假设，形象和故事。并深受习惯思维，定势思维，已有知识的局限”。我真的知道自己内心深处的思考方式吗？我真的自以为很了解自己吗？我成长过程中形成的思维里的那堵墙到底是什么呢？带着这些问题，翻开了这本颇有些鸡汤杂文气息的书。愿自己还有看到这篇笔记的你通过此书能够在忙忙碌碌的生活中有一些对于成长的思考，对于自身的认识，并做出一些真正的改变。（2021.12.22）</p><h2 id="让有趣的生命扑面而来"><a href="#让有趣的生命扑面而来" class="headerlink" title="让有趣的生命扑面而来"></a>让有趣的生命扑面而来</h2><p>什么是有趣的生命？我们经常听到对一个人的评价：这个人真有趣！亦或是这个人真无趣！古典老师在书中说</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kk的一天</title>
    <link href="/2021/12/15/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/12/15/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>从今天开始，改变自己前一段时间生活中的一些不好的习惯，如午觉睡的时间过长，早上动不动因为起晚就不吃早饭或随意敷衍过去等。当一个人闲下来的时候总会因为找不到一些学习工作之外自己的热爱而感到无聊空虚，继而无事即想睡觉，想了想自己之前的一些业余，跑步，练习毛笔字，看一些好看的电视剧等这些都应该重新拾起，从认真对待自己的生活开始！也就慢慢会认真对待自己的学习工作！这不会是日记！是热爱生活的人的记录！</p><h2 id="12月15日-多云转阴-6℃-19℃"><a href="#12月15日-多云转阴-6℃-19℃" class="headerlink" title="12月15日 多云转阴 6℃-19℃"></a>12月15日 多云转阴 6℃-19℃</h2><p>今天早上起来后一天没上床睡觉。学习了，也玩儿了，没啥好写，晚上看到一篇夜读文章，感觉不错，摘录一下吧。<br><strong>《一个人未来的样子，藏在他对待清晨的态度里》</strong><br>不知什么时候起，熬夜仿佛成了奋斗的标志。但仔细想想，能拉开人与人之间差距的不是晚睡，而是早起。<br>有位网友参加了一项“早起30天”的挑战。他是个普通上班族，以前熬夜加班后白天再继续工作，总觉得自己是在被任务拖着走，忍不住打瞌睡。开始坚持早睡早起后，犯困成了偶尔的事，工作效率大幅提升，成功避开了地铁早高峰，他再也不用体会被拥挤人潮推着走的感觉。由于头脑清醒，他做事更有计划，在工作时还时不时冒出各种创意。<br>早起，看似是细微的改变，收获却不容小觑。生活还是同样的生活，忙碌还是同样的忙碌，但是选择早睡早起，你就可以抓住了生活的主动权。<br>网上曾有一个“你为什么熬夜”的调查，有一半的网友坦承，自己往往是在追剧，耍手机，总觉得夜晚的时间才是自己的，舍不得睡。<br>我们的潜意识里总觉得，早起和熬夜都是时间，多熬一点，时间就多一点。但扪心自问，熬夜给了你什么？往往是身体抱恙，颜值崩塌，脱发长痘，精神不济。<br>同样是八小时睡眠，十点睡六点起，和凌晨两点睡十点起，过的是不一样的人生。早起的人拥有更加充沛的精力和更清醒的头脑，因为效率更高，还拥有更多的时间。<br>熬夜给不了你的，早起往往都能给你。时间对每个人都是公平的。它不会迁就任何人。我们应该学会的，是在最高效率最没有干扰的时候，做最该做的事情。早点儿起床，你值得用最好的状态，开启崭新的一天。<br>每次看到早起的文章，下面总会有人留言：“都知道早起好处多，但就是做不到”，其实，真正尝到了甜头的人，根本不用坚持早起。<br>有位up主曾是早起苦难户，下决心早起一次，刷刷手机后又想睡个回笼觉。直到他偶然看到一个说法：你做不到早起，往往是过多的外界干扰消耗了你的意志力。<br>他尝试改变，换上普通闹钟，保证早起后做第一件事情前不碰手机。他把要做的事情也拆分成了两分钟的小事：想健身，就快走两分钟；想学英语，那就背一个单词；想写脚本，就先写一行。他发现，早起做事不再艰难，充实感代替可焦虑。<br>有人说：“能控制早晨的人，方可控制人生”。“你和羡慕的生活之间，也许只有一个早起的距离。今夜，早点睡吧，有勇气结束今天，才有精力迎接更好的明天。</p><h2 id="12月17日-晴朗-1℃-12℃"><a href="#12月17日-晴朗-1℃-12℃" class="headerlink" title="12月17日 晴朗 1℃-12℃"></a>12月17日 晴朗 1℃-12℃</h2><p>今天是白天没上床的第三天，而且也没睡午觉。早早的去吃了个早饭，又去外面新教区溜达了一圈。而且是第三天早睡早起，晚上睡觉没带手机（以前的好习惯又回来了），三天下来，发现纵使一天不睡午觉也可以很精神的去做事情，而且这几天感觉每天状态都非常不错。现在想想，前段时间下午一没事情就躺床上一两个小时真是罪过啊！希望能够坚持到离校，还有两周多。<br>下午两节课的嵌入式又学到了不少东西，这也算是自己本科生涯的倒数第二课了。没什么特别的仪式感，也就这么普普通通的过去了，自己的美好大学生活也将要过去了。现在写下前面这几句话时，思绪不觉又飘到以前各类各样的课堂上去了，有很多给人印象深刻的老师，像大一上学期的思修老师和工图老师等等。不知道自己和三年多前刚怯怯的来到这儿时有什么变化，自己也觉察不出来，只觉得自己对很多事情的看法有了根本性的变化了，或是开始思考很多很多事情了，人前也没以前那么扭捏了。这些答案得过年回去和三年多没见的好友好好唠唠嗑了。<br>今天天气不错，也如今日之心情，坚持这几天好的开端，早上去新操场那边的那个宝藏地儿真不错！明天早上去那多站一会儿（想想该干些什么）。</p><h2 id="12月19日-晴朗-2℃-12℃"><a href="#12月19日-晴朗-2℃-12℃" class="headerlink" title="12月19日 晴朗 -2℃-12℃"></a>12月19日 晴朗 -2℃-12℃</h2><p>继续早睡早起白天不上床的一天，感觉精神状态一天比一天好！早饭煎饺黑米粥，午饭香锅，晚饭炸酥肉（最近着实有些能吃了）。<br>今天把《国王排名》给追到最新的，对于一个已经有两三年没怎么看动漫的人来说，突然看一下倒真感觉挺治愈（上一次追动漫还是大一那个秦时明月）。这个波吉殿下真是太喜欢了，以及卡克，还有其他叫不上名儿的都不错，挺励志！<br>晚上看了一会儿珂学原理，老王的这几个视频看了好几遍了，每一次看都有新领会，他说学好数学和历史交织在一起能够让一个人在这个不确定的时代能够从容面对，总觉得是真的吗？也许得真正去深入才能知道，对于历史，自己向来是喜欢。但数学，怎么说呢？不排斥也不是太喜欢（可能自己没真正深入吧，曾经也看过一些数学史的书，也挺有趣的，但到大学接受高等数学，线代等课堂式的数学后，也即做题式的数学，为了考试式的数学，不得不说自己之前对于数学的兴趣遭受了很大的打击，但我想现在这些闲时间我可以继续在珂学原理好好听听老王讲的一些数学了）。<br>这几天闲的没事跟家里视了视频，谈话间感觉时间真快啊！有时候总感觉自己还没真正长大，有时候也总感觉自己要开始想想一些长大后该想想的事情了。但有一点自己是清楚的，自己现在能够安心读书也许是最重要的，不管周围还是远处，不管自己内心还是外界，各种各样来自各个方面的使人心扰的东西还是蛮多的，身边的一切也在快速之变化，正如安静的校园围墙之外一样。在这样的世界矗立而不迷茫，对于现在的自己来说总归是有些挑战的。老王那期视频还有早上听的晓书童的那期节目说的都不错，找到自己热爱的事情然后像极限运动员一样去做。可是现在什么才是自己真正热爱做的事情呢？相信也是很多人的同样的疑惑，科学研究吗？运动吗？学习吗?睡觉吗？….,或许都不是，就要像晓书童说的那样，与其拼命去追求意义，不如好好感知当下的意义！确实不错，但自己着实理解的好大一会儿。我想自己以后写的东西一定也还会讨论这个问题的，今天就写到这儿吧。<br>总而言之，今天收获不少！</p><h2 id="12月24日-阴（有雾）-5℃-17℃"><a href="#12月24日-阴（有雾）-5℃-17℃" class="headerlink" title="12月24日 阴（有雾） 5℃-17℃"></a>12月24日 阴（有雾） 5℃-17℃</h2><p>早起+白天不上床的第九天！这几天早上总觉得没啥胃口，但早饭一定还是要吃的。上午继续看了会儿嵌入式，堆与栈，还有中断啥的，其实这些以前总感觉迷迷糊糊的东西如果仔仔细细的看看倒真没啥难以理解的，只是在于你的内心愿不愿意去仔细想思考一会儿！<br>下午又还是去上了嵌入式的课，真正的大学最后一课了，虽然只有4个人来。老师也讲了C语言的一些东西，也都是些基础的知识罢了。上课前老师闲聊的一些东西倒真是让自己思考好些！他说需要花花时间去规划规划未来，所谓的名校学历的作用期也就毕业5年之内，名校也就是拉高了一下自己最后落脚的平台，受到一些熏陶。如果研究生三年后面对自己人生的态度和现在无异，依旧有些茫然（包括读研究生的时候），像老师说的那样到时如果找工作或是继续读下去，哪儿要自己就去哪儿，那这个研究生不管在哪儿读可能效果都是一样的。可现如今很多人（包括过去的自己）也就真的认为读了个名校研究生后就一定会所谓的有出息，可殊不知这是建立在读研需要付出更多的努力，经历更多的艰辛而蜕变的基础上的。现在也就真的需偶尔考虑自己今后要去哪儿接受社会的毒打！如今信息如此发达，想去的地方需要什么样的人才都很容易知道，记得去年自己说以后要去小米跟雷总造车（可能被去年雷总的演讲整的激情澎湃哈哈哈）。不知道现在自己离这个目标点有多远（哈哈）。也算今天在此标个点吧！人生如戏！造化弄人！以后谁也未知？就像大学刚来甚至直到大二结束时自己怎么会知道自己大三后的生活是什么样的呢？<br>最后一课结束了！到明年九月份这么大的一段空白期，心好好静下来！有些东西对于自己来说有无必要自己是很清楚的，好好认识认识自己。今天又看了些《拆掉思维里的墙》，一个人最重要的能力是什么呢？大概就是能够对自己有清晰的认识，能够利用自己学到的知识以及身边高人的指导找到自己热爱的事情，然后将自己学习的能力发挥到炉火纯青去做好它吧！（起码现在认为如此！）</p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>梦开始的地方</title>
    <link href="/2021/12/12/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/2021/12/12/%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><strong>浅谈知识的输入与输出</strong></p><p>有那么一段时间，我总在思考一个问题：回顾自己从小学，中学，到现在，什么状态或是说哪一个时刻自己对于外界而来的信息（学习的知识，掌握的技能，身边亲人及老师的指导等）突然就像烙印一样印在自己的脑海，让自己能够在很长一段时间内都不会忘记。</p><p>几经回忆这些状态和时刻：自己曾与同学讨论某一道难题时发表自己观点的时候，高中课前演讲向大家分享自己对一些事情的看法的时候，暑假辅导班里向小朋友们讲解英语语法的时候，参加科创竞赛将脑海中的模型转化为实物的时候……。</p><p>我发现这些时刻或状态都有一个相同的特点：那就是它们都存在于自己向外界向他人进行输出的时候，只不过输出的方式，对象不同而已。颇有醍醐灌顶之感，了解吸收某一知识最好的时候就是向外界输出的时候。想想自己认认真真听过的那些大学课堂，倒可能真的不如去独自与老师交流一番。</p><p>有了这样的输出的机会，反过来才会使输入更有效率，也更加深刻！因此，在自己的好室友LW的带动入坑下，开启搭建了自己的这个博客。想想B站上的那些科普up主，一些知识分享的公众号大V，这些人都是能很好的运用知识的输入与输出的人，况且他们在还能得到收益的前提下，更会对自己吸收的知识有无比透彻的了解。而自己现在只是单纯的想在这上面写一些东西作为一种输出的方式而已，仅此而已，不管有没有人看到，多少人看到，我都会假想出一个阅读对象，我将尽力去把自己分享的一些知识通俗易懂的表达出来。此外，也会有一些生活中的日常所感，读书笔记，还有自己大学几年积累的游玩照片等。</p><p>总而言之，这不是一个单调生硬的网页，这是一个以后越来越无比热爱生活的人的一些记录，一些有趣的东西，一些好玩儿的东西！</p><p>（2021.12.12 夜 孔琨）</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
